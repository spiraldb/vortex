searchState.loadedDescShard("vortex_scalar", 0, "A single logical item, composed of both a <code>ScalarValue</code> and …\nRepresents the internal data of a scalar value. Must be …\nAccess PValue as <code>f16</code>, returning <code>None</code> if conversion is …\nAccess PValue as <code>f32</code>, returning <code>None</code> if conversion is …\nAccess PValue as <code>f64</code>, returning <code>None</code> if conversion is …\nAccess PValue as <code>i16</code>, returning <code>None</code> if conversion is …\nAccess PValue as <code>i32</code>, returning <code>None</code> if conversion is …\nAccess PValue as <code>i64</code>, returning <code>None</code> if conversion is …\nAccess PValue as <code>i8</code>, returning <code>None</code> if conversion is …\nAccess PValue as <code>u16</code>, returning <code>None</code> if conversion is …\nAccess PValue as <code>u32</code>, returning <code>None</code> if conversion is …\nAccess PValue as <code>u64</code>, returning <code>None</code> if conversion is …\nAccess PValue as <code>u8</code>, returning <code>None</code> if conversion is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the stored value of the extension scalar.")