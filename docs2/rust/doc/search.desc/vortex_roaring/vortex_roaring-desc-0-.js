searchState.loadedDescShard("vortex_roaring", 0, "A compressed bitmap\nThe <code>Portable</code> format is meant to be compatible with other …\nThe array definition trait\nThe array encoding\nThe array definition trait\nThe array encoding\nAdd the integer element to the bitmap\nAdd the integer element to the bitmap. Returns true if the …\nAdd the integer element to the bitmap\nCompute a new bitmap, which contains all values from this …\nAdd all values in range\nAnd computes the intersection between two bitmaps and …\nReturn the size of the intersection between Self and &amp;other\nComputes the intersection between two bitmaps and stores …\nComputes the difference between two bitmaps and returns …\nReturn the size of the difference between Self and &amp;other\nComputes the difference between two bitmaps and stores the …\nSyntactic sugar for <code>.and</code>\nSyntactic sugar for <code>.and</code>\nSyntactic sugar for <code>.and</code>\nSyntactic sugar for <code>.and</code>\nSyntactic sugar for <code>.and_inplace</code>\nSyntactic sugar for <code>.and_inplace</code>\nSyntactic sugar for <code>.and_inplace</code>\nSyntactic sugar for <code>.and_inplace</code>\nSyntatic sugar for <code>.or</code>\nSyntatic sugar for <code>.or</code>\nSyntatic sugar for <code>.or</code>\nSyntatic sugar for <code>.or</code>\nSyntatic sugar for <code>.or_inplace</code>\nSyntatic sugar for <code>.or_inplace</code>\nSyntatic sugar for <code>.or_inplace</code>\nSyntatic sugar for <code>.or_inplace</code>\nSyntatic sugar for <code>.xor</code>\nSyntatic sugar for <code>.xor</code>\nSyntatic sugar for <code>.xor</code>\nSyntatic sugar for <code>.xor</code>\nSyntatic sugar for <code>.xor_inplace</code>\nSyntatic sugar for <code>.xor_inplace</code>\nSyntatic sugar for <code>.xor_inplace</code>\nSyntatic sugar for <code>.xor_inplace</code>\nReturns the number of integers contained in the bitmap\nEmpties the bitmap\nCreate a copy of a Bitmap\nContains returns true if the integer element is contained …\nCheck whether a range of values of range are present\nReturns a cursor pointing at the first value in the bitmap.\nReturns a cursor pointing at the last value in the bitmap.\nGiven a serialized bitmap as slice of bytes in format <code>S </code>, …\nComputes the union between many bitmaps quickly, as …\nCompute the union of ‘number’ bitmaps using a heap. …\nComputes the symmetric difference (xor) between multiple …\nNegates the bits in the given range any integer present in …\nNegates the bits in the given range any integer present in …\nIterate over the values in the bitmap in sorted order\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience method for creating bitmap from iterator.\nCreate a new bitmap with all values in <code>range</code>\nCreate a new bitmap with all values in <code>range</code> which are a …\nComputes the serialized size in bytes of the Bitmap in …\nComputes the serialized size in bytes of the Treemap in …\nReturn true if Self and &amp;other intersect\nCheck if a bitmap has any values set in <code>range</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the Bitmap is empty. Faster than doing: …\nReturn true if all the elements of Self are in &amp;other and …\nReturn true if all the elements of Self are in &amp;other.\nReturns an iterator over each value stored in the bitmap. …\nReturn the Jaccard index between Self and &amp;other\nPerform multiple bitwise operations on a bitmap.\nReturns the greatest value in the set.\nReturns the smallest value in the set.\nCreates a new bitmap (initially empty)\nCreates a new bitmap from a slice of u32 integers\nOr computes the union between two bitmaps and returns the …\nReturn the size of the union between Self and &amp;other\nComputes the union between two bitmaps and stores the …\nReturns the index of x in the given roaring bitmap.\nReturns number of elements in range\nRank returns the number of values smaller or equal to x.\nClear the integer element from the bitmap\nRemove the integer element from the bitmap. Returns true …\nRemove many values from the bitmap\nRemove all values in range\nRemoves run-length encoding even when it is more space …\nCompresses of the bitmap. Returns true if the bitmap was …\nSelect returns the element having the designated position, …\nSerializes a bitmap to a slice of bytes in format <code>S</code>.\nSerializes a Treemap to a slice of bytes in portable …\nSerializes a bitmap to a slice of bytes in format <code>S</code>, …\nSerializes a Treemap to a writer in portable format. See …\nShrink the memory allocation of the bitmap if needed\nReturns statistics about the composition of a roaring …\nSyntatic sugar for <code>.andnot</code>\nSyntatic sugar for <code>.andnot</code>\nSyntatic sugar for <code>.andnot</code>\nSyntatic sugar for <code>.andnot</code>\nSyntatic sugar for <code>.andnot_inplace</code>\nSyntatic sugar for <code>.andnot_inplace</code>\nSyntatic sugar for <code>.andnot_inplace</code>\nSyntatic sugar for <code>.andnot_inplace</code>\nStore the bitmap to a bitset\nReturns a vector containing all of the integers stored in …\nGiven a serialized bitmap as slice of bytes in format <code>S</code>, …\nSerializes a bitmap to a slice of bytes in format <code>S</code>\nCreates a new bitmap (initially empty) with a provided …\nComputes the symmetric difference (xor) between two bitmaps\nReturn the size of the symmetric difference between Self …\nInplace version of roaring_bitmap_xor, stores result in …")