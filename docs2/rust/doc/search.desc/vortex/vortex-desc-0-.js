searchState.loadedDescShard("vortex", 0, "Vortex crate containing core logic for encoding and memory …\nA central type for all Vortex arrays, which are known …\nA depth-first pre-order iterator over a ArrayData.\nOwned <code>Array</code> with serialized metadata, backed by …\nTrait the defines the set of types relating to an array. …\nDynamic trait used to represent opaque owned Array metadata\nCollects together the behavior of an array.\nZero-copy view over flatbuffer-encoded array data, created …\nThe set of canonical array encodings, also the set of …\nA mapping between an encoding’s ID to an <code>EncodingRef</code>, …\nOwned <code>Array</code> with serialized metadata, backed by …\nConsume <code>self</code> and turn it into an <code>Array</code> infallibly.\nTrait for types that can be converted from an owned type …\nSupport trait for transmuting an array into its …\nContainer for an array with all the associated …\nZero-copy view over flatbuffer-encoded <code>Array</code> data, created …\nReturn the buffer offsets and the total length of all …\nAll the built-in encoding schemes and arrays.\nUtilities to work with <code>Arrow</code> data and types.\nReturns a Vec of Arrays with all of the array’s child …\nCompute kernels on top of Vortex Arrays.\nCount the number of cumulative buffers encoded by self.\nTraits and types to define shared unique encoding …\nRe-exported autogenerated code from the core Vortex …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether the current Array makes use of a buffer\nMacro to generate all the necessary code for a new type of …\nMacro to generate all the necessary code for a new type of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert a canonical array into its equivalent ArrayRef…\nChecks whether array is of a given encoding.\nReturns the number of logical elements in the array.\nTotal size of the array in bytes, including all children …\nTotal size of the array in bytes, including all children …\nReturns the number of child arrays\nWe want to avoid any sort of allocation on instantiation …\nTraits and utilities to compute and access array …\nNB: part of the contract for to_set is that it does not do …\nArray validity and nullability behavior, used by arrays …\nThis module defines array traits for each Vortex DType.\nTrait for arrays that support iterative access to their …\nIterate over each element of the array, in-order.\nThe array definition trait\nThe array encoding\nThe array definition trait\nThe array encoding\nThe array definition trait\nThe array encoding\nThe array definition trait\nThe array encoding\nThe array definition trait\nThe array encoding\nThe array definition trait\nThe array encoding\nThe array definition trait\nThe array encoding\nThe array definition trait\nThe array encoding\nAn array wrapper for primitive values that have an …\nThe array definition trait\nThe array encoding\nThe array definition trait\nThe array encoding\nAccess one of the backing data buffers.\nNumber of raw string data buffers held by this array.\nRetrieve an iterator over the raw data buffers. These are …\nAccess the value bytes child array\nRetrieve the extension DType associated with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new array of type U8\nAccumulate an iterable set of values into our type here.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStructEncoding is the canonical form for a DType::Struct …\nConvert the array into a mutable vec of the given type. If …\nConsumes self, returning a tuple containing the <code>DType</code>, the …\nReturn the minimum index if indices are present.\nCreate a new <code>TemporalArray</code> holding either i32 day offsets, …\nCreate a new <code>TemporalArray</code> holding one of the following …\nCreate a new <code>TemporalArray</code> holding Arrow spec compliant …\nCreate a new view over bytes stored in a block.\nConstruct an owned <code>vortex_scalar::Scalar</code> with a value …\nReturn a new StructArray with the given projection applied.\nReturn indices as a vector of usize with the …\nAccess value bytes child array limited to values that are …\nRetrieve the temporal metadata.\nAccess the underlying temporal values in the underlying …\nTry to specialize a generic Vortex array as a …\nTry to specialize a generic Vortex array as a …\nAccess to the underlying <code>views</code> child array as a slice of …\nAccess to the primitive views array.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVisit a child of this array.\nUtility for visiting Array validity.\nTry to convert a Vortex <code>DType</code> into an Arrow <code>DataType</code>\nConvert a Vortex struct DType to an Arrow Schema.\nCheck that compression did not alter the dtype\nCheck that compression did not alter the length of the …\nTrait providing compute functions on top of Vortex arrays.\nResult for a found element was found at the given index in …\nResult for an element not found, but that could be …\nResult of performing search_sorted on an Array\nSearches for value assuming the array is sorted.\nLimit array to start…stop range\nPerform a boolean AND operation over two arrays\nImplemented for arrays that can be casted to different …\nBinary operator implementation for arrays against other …\nArray function that returns new arrays a non-null value is …\nReturn a new array by applying a boolean predicate to …\nFilter an array by the provided predicate.\nFiltering function on arrays of predicates.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform a boolean OR operation over two arrays\nSingle item indexing on Vortex arrays.\nPerform a search over an ordered array.\nfind function is used to find the element if it exists, if …\nSearch for many elements in the array.\nBulk search for many values.\nBulk search for many values.\nReturn a zero-copy slice of an array, between <code>start</code> …\nReturn a zero-copy slice of an array, between <code>start</code> …\nPerform zero-copy slicing of an array.\nBroadcast subtraction of scalar from Vortex array.\nChange the sides of the operator, where changing lhs and …\nTake a set of indices from an array. This often forces …\nConvert search result into an index suitable for searching …\nConvert search result to an index only if the value have …\nExtract index out of search result regardless of whether …\nConvert search result into an index suitable for searching …\nTrait for filling forward on an array, i.e., replacing …\nReturns a <code>Scalar</code> value without checking for validity or …\nAttempt to cast an array to a desired DType.\nObject-safe encoding trait for an array.\nNon-object-safe extensions to the ArrayEncoding trait.\nEncodingId is a unique name and numerical code of the array\nFlatten the given array.\nReturns the argument unchanged.\nEncoding ID constants for all Vortex-provided encodings\nCalls <code>U::from(self)</code>.\nUnwrap the provided array into an implementation of …\nAn encoding of an array that we cannot interpret.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerifies that a buffer of bytes contains a <code>Array</code> and …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given options, that a buffer of bytes …\nVerifies that a buffer of bytes contains a size prefixed …\nAssumes, without verification, that a buffer of bytes …\nVerifies, with the given verifier options, that a buffer of\nReturns the variant’s name or “” if unknown.\nDefine the basic behavior required for batched iterators\nA stream of array chunks along with a DType. Analogous to …\nIterate over batches of compressed arrays, should help …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the value of the stat if it’s not present\nCompute the requested statistic. Can return additional …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value of the statistic only if it’s present\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecialized constructor for the case where the StatsSet …\nGet all existing statistics\nA stream of array chunks along with a DType.\nAn adapter for a stream of array chunks to implement an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll items are null\nAll items are valid\nSpecified items are null\nThe <code>DType</code> of the underlying validity array (if it exists).\nItems <em>can’t</em> be null\nValidity information for an array\nLogically &amp; two Validity values of the same length\nIf Validity is <code>Validity::Array</code>, returns a reference to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf Validity is <code>Validity::Array</code>, returns the array, …\nConvert into a nullable variant\nReturns whether the <code>index</code> item is valid.\nReturns the extension logical <code>DType</code>.\nReturn a field’s array by index\nReturn a field’s array by name\nReturn a new inverted version of this array.\nAn iterator over the sorted indices of set values in the …\nAn iterator over the sorted disjoint contiguous range set …\nReturns the underlying <code>Array</code>, without the <code>ExtDType</code>.")