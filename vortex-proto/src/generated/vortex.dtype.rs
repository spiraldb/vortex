// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Null {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bool {
    #[prost(bool, tag = "1")]
    pub nullable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Primitive {
    #[prost(enumeration = "PType", tag = "1")]
    pub r#type: i32,
    #[prost(bool, tag = "2")]
    pub nullable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Decimal {
    #[prost(uint32, tag = "1")]
    pub precision: u32,
    #[prost(uint32, tag = "2")]
    pub scale: u32,
    #[prost(bool, tag = "3")]
    pub nullable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Utf8 {
    #[prost(bool, tag = "1")]
    pub nullable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Binary {
    #[prost(bool, tag = "1")]
    pub nullable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Struct {
    #[prost(string, repeated, tag = "1")]
    pub names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "2")]
    pub dtypes: ::prost::alloc::vec::Vec<DType>,
    #[prost(bool, tag = "3")]
    pub nullable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct List {
    #[prost(message, optional, boxed, tag = "1")]
    pub element_type: ::core::option::Option<::prost::alloc::boxed::Box<DType>>,
    #[prost(bool, tag = "2")]
    pub nullable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Extension {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub metadata: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    #[prost(bool, tag = "3")]
    pub nullable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DType {
    #[prost(oneof = "d_type::DtypeType", tags = "1, 2, 3, 4, 5, 6, 7, 8, 9")]
    pub dtype_type: ::core::option::Option<d_type::DtypeType>,
}
/// Nested message and enum types in `DType`.
pub mod d_type {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum DtypeType {
        #[prost(message, tag = "1")]
        Null(super::Null),
        #[prost(message, tag = "2")]
        Bool(super::Bool),
        #[prost(message, tag = "3")]
        Primitive(super::Primitive),
        #[prost(message, tag = "4")]
        Decimal(super::Decimal),
        #[prost(message, tag = "5")]
        Utf8(super::Utf8),
        #[prost(message, tag = "6")]
        Binary(super::Binary),
        #[prost(message, tag = "7")]
        Struct(super::Struct),
        #[prost(message, tag = "8")]
        List(::prost::alloc::boxed::Box<super::List>),
        #[prost(message, tag = "9")]
        Extension(super::Extension),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Field {
    #[prost(oneof = "field::FieldType", tags = "1, 2")]
    pub field_type: ::core::option::Option<field::FieldType>,
}
/// Nested message and enum types in `Field`.
pub mod field {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum FieldType {
        #[prost(string, tag = "1")]
        Name(::prost::alloc::string::String),
        #[prost(uint64, tag = "2")]
        Index(u64),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FieldPath {
    #[prost(message, repeated, tag = "1")]
    pub path: ::prost::alloc::vec::Vec<Field>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PType {
    U8 = 0,
    U16 = 1,
    U32 = 2,
    U64 = 3,
    I8 = 4,
    I16 = 5,
    I32 = 6,
    I64 = 7,
    F16 = 8,
    F32 = 9,
    F64 = 10,
}
impl PType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PType::U8 => "U8",
            PType::U16 => "U16",
            PType::U32 => "U32",
            PType::U64 => "U64",
            PType::I8 => "I8",
            PType::I16 => "I16",
            PType::I32 => "I32",
            PType::I64 => "I64",
            PType::F16 => "F16",
            PType::F32 => "F32",
            PType::F64 => "F64",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "U8" => Some(Self::U8),
            "U16" => Some(Self::U16),
            "U32" => Some(Self::U32),
            "U64" => Some(Self::U64),
            "I8" => Some(Self::I8),
            "I16" => Some(Self::I16),
            "I32" => Some(Self::I32),
            "I64" => Some(Self::I64),
            "F16" => Some(Self::F16),
            "F32" => Some(Self::F32),
            "F64" => Some(Self::F64),
            _ => None,
        }
    }
}
